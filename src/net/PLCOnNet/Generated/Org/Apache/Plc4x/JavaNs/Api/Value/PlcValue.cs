/*
*  Copyright 2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.13.0)
*  using plc4j-api-0.12.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Plc4x.JavaNs.Api.Value
{
    #region PlcValue declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/value/PlcValue.html"/>
    /// </summary>
    public partial class PlcValue : MASES.JCOBridge.C2JBridge.JVMBridgeBase<PlcValue>
    {
        const string _bridgeClassName = "org.apache.plc4x.java.api.value.PlcValue";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        [global::System.Obsolete("PlcValue class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public PlcValue() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        [global::System.Obsolete("PlcValue class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public PlcValue(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => true;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => true;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region IPlcValue
    /// <summary>
    /// .NET interface skeleton to be manually developed following <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/value/PlcValue.html"/>
    /// </summary>
    public partial interface IPlcValue
    {
        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion

    #region PlcValue implementation
    public partial class PlcValue : Org.Apache.Plc4x.JavaNs.Api.Value.IPlcValue
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/value/PlcValue.html#getBigDecimal()"/> 
        /// </summary>
        public Java.Math.BigDecimal BigDecimal
        {
            get { return IExecuteWithSignature<Java.Math.BigDecimal>("getBigDecimal", "()Ljava/math/BigDecimal;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/value/PlcValue.html#getBigInteger()"/> 
        /// </summary>
        public Java.Math.BigInteger BigInteger
        {
            get { return IExecuteWithSignature<Java.Math.BigInteger>("getBigInteger", "()Ljava/math/BigInteger;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/value/PlcValue.html#getBoolean()"/> 
        /// </summary>
        public bool Boolean
        {
            get { return IExecuteWithSignature<bool>("getBoolean", "()Z"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/value/PlcValue.html#getByte()"/> 
        /// </summary>
        public byte Byte
        {
            get { return IExecuteWithSignature<byte>("getByte", "()B"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/value/PlcValue.html#getDate()"/> 
        /// </summary>
        public Java.Time.LocalDate Date
        {
            get { return IExecuteWithSignature<Java.Time.LocalDate>("getDate", "()Ljava/time/LocalDate;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/value/PlcValue.html#getDateTime()"/> 
        /// </summary>
        public Java.Time.LocalDateTime DateTime
        {
            get { return IExecuteWithSignature<Java.Time.LocalDateTime>("getDateTime", "()Ljava/time/LocalDateTime;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/value/PlcValue.html#getDouble()"/> 
        /// </summary>
        public double Double
        {
            get { return IExecuteWithSignature<double>("getDouble", "()D"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/value/PlcValue.html#getDuration()"/> 
        /// </summary>
        public Java.Time.Duration Duration
        {
            get { return IExecuteWithSignature<Java.Time.Duration>("getDuration", "()Ljava/time/Duration;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/value/PlcValue.html#getFloat()"/> 
        /// </summary>
        public float Float
        {
            get { return IExecuteWithSignature<float>("getFloat", "()F"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/value/PlcValue.html#getInt()"/> 
        /// </summary>
        public int Int
        {
            get { return IExecuteWithSignature<int>("getInt", "()I"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/value/PlcValue.html#getInteger()"/> 
        /// </summary>
        public int Integer
        {
            get { return IExecuteWithSignature<int>("getInteger", "()I"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/value/PlcValue.html#getKeys()"/> 
        /// </summary>
        public Java.Util.Set<Java.Lang.String> Keys
        {
            get { return IExecuteWithSignature<Java.Util.Set<Java.Lang.String>>("getKeys", "()Ljava/util/Set;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/value/PlcValue.html#getLength()"/> 
        /// </summary>
        public int Length
        {
            get { return IExecuteWithSignature<int>("getLength", "()I"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/value/PlcValue.html#getList()"/> 
        /// </summary>
        public Java.Util.List List
        {
            get { return IExecuteWithSignature<Java.Util.List>("getList", "()Ljava/util/List;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/value/PlcValue.html#getLong()"/> 
        /// </summary>
        public long Long
        {
            get { return IExecuteWithSignature<long>("getLong", "()J"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/value/PlcValue.html#getMetaDataNames()"/> 
        /// </summary>
        public Java.Util.Set<Java.Lang.String> MetaDataNames
        {
            get { return IExecuteWithSignature<Java.Util.Set<Java.Lang.String>>("getMetaDataNames", "()Ljava/util/Set;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/value/PlcValue.html#getObject()"/> 
        /// </summary>
        public object Object
        {
            get { return IExecuteWithSignature("getObject", "()Ljava/lang/Object;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/value/PlcValue.html#getPlcValueType()"/> 
        /// </summary>
        public Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType PlcValueType
        {
            get { return IExecuteWithSignature<Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType>("getPlcValueType", "()Lorg/apache/plc4x/java/api/types/PlcValueType;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/value/PlcValue.html#getRaw()"/> 
        /// </summary>
        public byte[] Raw
        {
            get { return IExecuteWithSignatureArray<byte>("getRaw", "()[B"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/value/PlcValue.html#getShort()"/> 
        /// </summary>
        public short Short
        {
            get { return IExecuteWithSignature<short>("getShort", "()S"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/value/PlcValue.html#getString()"/> 
        /// </summary>
        public Java.Lang.String String
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getString", "()Ljava/lang/String;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/value/PlcValue.html#getStruct()"/> 
        /// </summary>
        public Java.Util.Map Struct
        {
            get { return IExecuteWithSignature<Java.Util.Map>("getStruct", "()Ljava/util/Map;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/value/PlcValue.html#getTime()"/> 
        /// </summary>
        public Java.Time.LocalTime Time
        {
            get { return IExecuteWithSignature<Java.Time.LocalTime>("getTime", "()Ljava/time/LocalTime;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/value/PlcValue.html#get(java.lang.Class)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Class"/></param>
        /// <typeparam name="T"></typeparam>
        /// <returns><typeparamref name="T"/></returns>
        public T Get<T>(Java.Lang.Class arg0)
        {
            return IExecuteWithSignature<T>("get", "(Ljava/lang/Class;)Ljava/lang/Object;", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/value/PlcValue.html#hasKey(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool HasKey(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<bool>("hasKey", "(Ljava/lang/String;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/value/PlcValue.html#hasMetaData(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool HasMetaData(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<bool>("hasMetaData", "(Ljava/lang/String;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/value/PlcValue.html#is(java.lang.Class)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Class"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool Is(Java.Lang.Class arg0)
        {
            return IExecuteWithSignature<bool>("is", "(Ljava/lang/Class;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/value/PlcValue.html#isBigDecimal()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsBigDecimal()
        {
            return IExecuteWithSignature<bool>("isBigDecimal", "()Z");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/value/PlcValue.html#isBigInteger()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsBigInteger()
        {
            return IExecuteWithSignature<bool>("isBigInteger", "()Z");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/value/PlcValue.html#isBoolean()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsBoolean()
        {
            return IExecuteWithSignature<bool>("isBoolean", "()Z");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/value/PlcValue.html#isByte()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsByte()
        {
            return IExecuteWithSignature<bool>("isByte", "()Z");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/value/PlcValue.html#isConvertibleTo(java.lang.Class)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Class"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsConvertibleTo(Java.Lang.Class arg0)
        {
            return IExecuteWithSignature<bool>("isConvertibleTo", "(Ljava/lang/Class;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/value/PlcValue.html#isDate()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsDate()
        {
            return IExecuteWithSignature<bool>("isDate", "()Z");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/value/PlcValue.html#isDateTime()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsDateTime()
        {
            return IExecuteWithSignature<bool>("isDateTime", "()Z");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/value/PlcValue.html#isDouble()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsDouble()
        {
            return IExecuteWithSignature<bool>("isDouble", "()Z");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/value/PlcValue.html#isDuration()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsDuration()
        {
            return IExecuteWithSignature<bool>("isDuration", "()Z");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/value/PlcValue.html#isFloat()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsFloat()
        {
            return IExecuteWithSignature<bool>("isFloat", "()Z");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/value/PlcValue.html#isInteger()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsInteger()
        {
            return IExecuteWithSignature<bool>("isInteger", "()Z");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/value/PlcValue.html#isList()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsList()
        {
            return IExecuteWithSignature<bool>("isList", "()Z");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/value/PlcValue.html#isLong()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsLong()
        {
            return IExecuteWithSignature<bool>("isLong", "()Z");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/value/PlcValue.html#isNull()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsNull()
        {
            return IExecuteWithSignature<bool>("isNull", "()Z");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/value/PlcValue.html#isNullable()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsNullable()
        {
            return IExecuteWithSignature<bool>("isNullable", "()Z");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/value/PlcValue.html#isShort()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsShort()
        {
            return IExecuteWithSignature<bool>("isShort", "()Z");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/value/PlcValue.html#isSimple()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsSimple()
        {
            return IExecuteWithSignature<bool>("isSimple", "()Z");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/value/PlcValue.html#isString()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsString()
        {
            return IExecuteWithSignature<bool>("isString", "()Z");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/value/PlcValue.html#isStruct()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsStruct()
        {
            return IExecuteWithSignature<bool>("isStruct", "()Z");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/value/PlcValue.html#isTime()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsTime()
        {
            return IExecuteWithSignature<bool>("isTime", "()Z");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/value/PlcValue.html#getIndex(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Org.Apache.Plc4x.JavaNs.Api.Value.PlcValue"/></returns>
        public Org.Apache.Plc4x.JavaNs.Api.Value.PlcValue GetIndex(int arg0)
        {
            return IExecuteWithSignature<Org.Apache.Plc4x.JavaNs.Api.Value.PlcValue>("getIndex", "(I)Lorg/apache/plc4x/java/api/value/PlcValue;", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/value/PlcValue.html#getMetaData(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Org.Apache.Plc4x.JavaNs.Api.Value.PlcValue"/></returns>
        public Org.Apache.Plc4x.JavaNs.Api.Value.PlcValue GetMetaData(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Org.Apache.Plc4x.JavaNs.Api.Value.PlcValue>("getMetaData", "(Ljava/lang/String;)Lorg/apache/plc4x/java/api/value/PlcValue;", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/value/PlcValue.html#getValue(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Org.Apache.Plc4x.JavaNs.Api.Value.PlcValue"/></returns>
        public Org.Apache.Plc4x.JavaNs.Api.Value.PlcValue GetValue(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Org.Apache.Plc4x.JavaNs.Api.Value.PlcValue>("getValue", "(Ljava/lang/String;)Lorg/apache/plc4x/java/api/value/PlcValue;", arg0);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}