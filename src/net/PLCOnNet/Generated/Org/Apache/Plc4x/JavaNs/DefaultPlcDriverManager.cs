/*
*  Copyright 2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.13.0)
*  using plc4j-api-0.13.0-SNAPSHOT.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Plc4x.JavaNs
{
    #region DefaultPlcDriverManager declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/DefaultPlcDriverManager.html"/>
    /// </summary>
    public partial class DefaultPlcDriverManager : MASES.JCOBridge.C2JBridge.JVMBridgeBase<DefaultPlcDriverManager>
    {
        const string _bridgeClassName = "org.apache.plc4x.java.DefaultPlcDriverManager";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public DefaultPlcDriverManager() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public DefaultPlcDriverManager(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region DefaultPlcDriverManager implementation
    public partial class DefaultPlcDriverManager : Org.Apache.Plc4x.JavaNs.Api.IPlcDriverManager, Org.Apache.Plc4x.JavaNs.Api.IPlcConnectionManager
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/DefaultPlcDriverManager.html#%3Cinit%3E(java.lang.ClassLoader)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.ClassLoader"/></param>
        public DefaultPlcDriverManager(Java.Lang.ClassLoader arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Org.Apache.Plc4x.JavaNs.DefaultPlcDriverManager"/> to <see cref="Org.Apache.Plc4x.JavaNs.Api.PlcDriverManager"/>
        /// </summary>
        public static implicit operator Org.Apache.Plc4x.JavaNs.Api.PlcDriverManager(Org.Apache.Plc4x.JavaNs.DefaultPlcDriverManager t) => t.Cast<Org.Apache.Plc4x.JavaNs.Api.PlcDriverManager>();
        /// <summary>
        /// Converter from <see cref="Org.Apache.Plc4x.JavaNs.DefaultPlcDriverManager"/> to <see cref="Org.Apache.Plc4x.JavaNs.Api.PlcConnectionManager"/>
        /// </summary>
        public static implicit operator Org.Apache.Plc4x.JavaNs.Api.PlcConnectionManager(Org.Apache.Plc4x.JavaNs.DefaultPlcDriverManager t) => t.Cast<Org.Apache.Plc4x.JavaNs.Api.PlcConnectionManager>();

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/DefaultPlcDriverManager.html#getConnectionManager()"/> 
        /// </summary>
        public Org.Apache.Plc4x.JavaNs.Api.PlcConnectionManager ConnectionManager
        {
            get { return IExecuteWithSignature<Org.Apache.Plc4x.JavaNs.Api.PlcConnectionManager>("getConnectionManager", "()Lorg/apache/plc4x/java/api/PlcConnectionManager;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/DefaultPlcDriverManager.html#getProtocolCodes()"/> 
        /// </summary>
        public Java.Util.Set<Java.Lang.String> ProtocolCodes
        {
            get { return IExecuteWithSignature<Java.Util.Set<Java.Lang.String>>("getProtocolCodes", "()Ljava/util/Set;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/DefaultPlcDriverManager.html#getConnection(java.lang.String,org.apache.plc4x.java.api.authentication.PlcAuthentication)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Plc4x.JavaNs.Api.Authentication.PlcAuthentication"/></param>
        /// <returns><see cref="Org.Apache.Plc4x.JavaNs.Api.PlcConnection"/></returns>
        /// <exception cref="Org.Apache.Plc4x.JavaNs.Api.Exceptions.PlcConnectionException"/>
        public Org.Apache.Plc4x.JavaNs.Api.PlcConnection GetConnection(Java.Lang.String arg0, Org.Apache.Plc4x.JavaNs.Api.Authentication.PlcAuthentication arg1)
        {
            return IExecuteWithSignature<Org.Apache.Plc4x.JavaNs.Api.PlcConnection>("getConnection", "(Ljava/lang/String;Lorg/apache/plc4x/java/api/authentication/PlcAuthentication;)Lorg/apache/plc4x/java/api/PlcConnection;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/DefaultPlcDriverManager.html#getConnection(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Org.Apache.Plc4x.JavaNs.Api.PlcConnection"/></returns>
        /// <exception cref="Org.Apache.Plc4x.JavaNs.Api.Exceptions.PlcConnectionException"/>
        public Org.Apache.Plc4x.JavaNs.Api.PlcConnection GetConnection(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Org.Apache.Plc4x.JavaNs.Api.PlcConnection>("getConnection", "(Ljava/lang/String;)Lorg/apache/plc4x/java/api/PlcConnection;", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/DefaultPlcDriverManager.html#getDriver(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Org.Apache.Plc4x.JavaNs.Api.PlcDriver"/></returns>
        /// <exception cref="Org.Apache.Plc4x.JavaNs.Api.Exceptions.PlcConnectionException"/>
        public Org.Apache.Plc4x.JavaNs.Api.PlcDriver GetDriver(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Org.Apache.Plc4x.JavaNs.Api.PlcDriver>("getDriver", "(Ljava/lang/String;)Lorg/apache/plc4x/java/api/PlcDriver;", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/DefaultPlcDriverManager.html#getDriverForUrl(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Org.Apache.Plc4x.JavaNs.Api.PlcDriver"/></returns>
        /// <exception cref="Org.Apache.Plc4x.JavaNs.Api.Exceptions.PlcConnectionException"/>
        public Org.Apache.Plc4x.JavaNs.Api.PlcDriver GetDriverForUrl(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Org.Apache.Plc4x.JavaNs.Api.PlcDriver>("getDriverForUrl", "(Ljava/lang/String;)Lorg/apache/plc4x/java/api/PlcDriver;", arg0);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}