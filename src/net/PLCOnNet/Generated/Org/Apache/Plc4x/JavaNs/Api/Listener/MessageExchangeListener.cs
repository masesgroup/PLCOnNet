/*
*  Copyright (c) 2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.2.0)
*  using plc4j-api-0.13.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Plc4x.JavaNs.Api.Listener
{
    #region MessageExchangeListener declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.13.0/org/apache/plc4x/java/api/listener/MessageExchangeListener.html"/>
    /// </summary>
    public partial class MessageExchangeListener : MASES.JCOBridge.C2JBridge.JVMBridgeListener
    {
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public MessageExchangeListener() { InitializeHandlers(); }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public MessageExchangeListener(params object[] args) : base(args) { InitializeHandlers(); }
        const string _bridgeClassName = "org.mases.plconnet.generated.org.apache.plc4x.java.api.listener.MessageExchangeListener";
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = ClazzOf(_bridgeClassName, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
        /// <inheritdoc />
        public override string BridgeClassName => _bridgeClassName;

    
        // TODO: complete the class

    }
    #endregion

    #region MessageExchangeListenerDirect declaration
    /// <summary>
    /// Direct override of <see cref="MessageExchangeListener"/> or its generic type if there is one
    /// </summary>
    public partial class MessageExchangeListenerDirect : MessageExchangeListener
    {
        /// <inheritdoc/>
        public override bool AutoInit => false;

        /// <inheritdoc />
        protected override void InitializeHandlers() { }

        const string _bridgeClassName = "org.apache.plc4x.java.api.listener.MessageExchangeListener";
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => true;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => true;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;
    }
    #endregion

    #region IMessageExchangeListener
    /// <summary>
    /// .NET interface for org.mases.plconnet.generated.org.apache.plc4x.java.api.listener.MessageExchangeListener implementing <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.13.0/org/apache/plc4x/java/api/listener/MessageExchangeListener.html"/>
    /// </summary>
    public partial interface IMessageExchangeListener
    {
        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion

    #region MessageExchangeListener implementation
    public partial class MessageExchangeListener : Org.Apache.Plc4x.JavaNs.Api.Listener.IMessageExchangeListener
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// Handlers initializer for <see cref="MessageExchangeListener"/>
        /// </summary>
        protected virtual void InitializeHandlers()
        {
            AddEventHandler("received", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(ReceivedEventHandler));
            AddEventHandler("sending", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(SendingEventHandler));

        }

        /// <summary>
        /// Handler for <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.13.0/org/apache/plc4x/java/api/listener/MessageExchangeListener.html#received(java.lang.Object)"/>
        /// </summary>
        /// <remarks>If <see cref="OnReceived"/> has a value it takes precedence over corresponding class method</remarks>
        public global::System.Action<object> OnReceived { get; set; } = null;

        bool hasOverrideReceived = true;
        void ReceivedEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
        {
            hasOverrideReceived = true;
            var methodToExecute = (OnReceived != null) ? OnReceived : Received;
            methodToExecute.Invoke(data.EventData.GetAt<object>(0));
            data.EventData.TypedEventData.HasOverride = hasOverrideReceived;
        }

        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.13.0/org/apache/plc4x/java/api/listener/MessageExchangeListener.html#received(java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        public virtual void Received(object arg0)
        {
            hasOverrideReceived = false;
        }

        /// <summary>
        /// Handler for <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.13.0/org/apache/plc4x/java/api/listener/MessageExchangeListener.html#sending(java.lang.Object)"/>
        /// </summary>
        /// <remarks>If <see cref="OnSending"/> has a value it takes precedence over corresponding class method</remarks>
        public global::System.Action<object> OnSending { get; set; } = null;

        bool hasOverrideSending = true;
        void SendingEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
        {
            hasOverrideSending = true;
            var methodToExecute = (OnSending != null) ? OnSending : Sending;
            methodToExecute.Invoke(data.EventData.GetAt<object>(0));
            data.EventData.TypedEventData.HasOverride = hasOverrideSending;
        }

        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.13.0/org/apache/plc4x/java/api/listener/MessageExchangeListener.html#sending(java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        public virtual void Sending(object arg0)
        {
            hasOverrideSending = false;
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion

    #region MessageExchangeListenerDirect implementation
    public partial class MessageExchangeListenerDirect : Org.Apache.Plc4x.JavaNs.Api.Listener.IMessageExchangeListener
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.13.0/org/apache/plc4x/java/api/listener/MessageExchangeListener.html#received(java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        public override void Received(object arg0)
        {
            IExecuteWithSignature("received", "(Ljava/lang/Object;)V", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.13.0/org/apache/plc4x/java/api/listener/MessageExchangeListener.html#sending(java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        public override void Sending(object arg0)
        {
            IExecuteWithSignature("sending", "(Ljava/lang/Object;)V", arg0);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}