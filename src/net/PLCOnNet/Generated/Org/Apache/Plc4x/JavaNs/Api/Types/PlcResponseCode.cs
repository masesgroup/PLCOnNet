/*
*  Copyright (c) 2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.1.0)
*  using plc4j-api-0.13.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Plc4x.JavaNs.Api.Types
{
    #region PlcResponseCode declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.13.0/org/apache/plc4x/java/api/types/PlcResponseCode.html"/>
    /// </summary>
    public partial class PlcResponseCode : Java.Lang.Enum<Org.Apache.Plc4x.JavaNs.Api.Types.PlcResponseCode>
    {
        const string _bridgeClassName = "org.apache.plc4x.java.api.types.PlcResponseCode";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public PlcResponseCode() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public PlcResponseCode(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => false;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => false;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region PlcResponseCode implementation
    public partial class PlcResponseCode
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.13.0/org/apache/plc4x/java/api/types/PlcResponseCode.html#ACCESS_DENIED"/>
        /// </summary>
        public static Org.Apache.Plc4x.JavaNs.Api.Types.PlcResponseCode ACCESS_DENIED { get { if (!_ACCESS_DENIEDReady) { _ACCESS_DENIEDContent = SGetField<Org.Apache.Plc4x.JavaNs.Api.Types.PlcResponseCode>(LocalBridgeClazz, "ACCESS_DENIED"); _ACCESS_DENIEDReady = true; } return _ACCESS_DENIEDContent; } }
        private static Org.Apache.Plc4x.JavaNs.Api.Types.PlcResponseCode _ACCESS_DENIEDContent = default;
        private static bool _ACCESS_DENIEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.13.0/org/apache/plc4x/java/api/types/PlcResponseCode.html#INTERNAL_ERROR"/>
        /// </summary>
        public static Org.Apache.Plc4x.JavaNs.Api.Types.PlcResponseCode INTERNAL_ERROR { get { if (!_INTERNAL_ERRORReady) { _INTERNAL_ERRORContent = SGetField<Org.Apache.Plc4x.JavaNs.Api.Types.PlcResponseCode>(LocalBridgeClazz, "INTERNAL_ERROR"); _INTERNAL_ERRORReady = true; } return _INTERNAL_ERRORContent; } }
        private static Org.Apache.Plc4x.JavaNs.Api.Types.PlcResponseCode _INTERNAL_ERRORContent = default;
        private static bool _INTERNAL_ERRORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.13.0/org/apache/plc4x/java/api/types/PlcResponseCode.html#INVALID_ADDRESS"/>
        /// </summary>
        public static Org.Apache.Plc4x.JavaNs.Api.Types.PlcResponseCode INVALID_ADDRESS { get { if (!_INVALID_ADDRESSReady) { _INVALID_ADDRESSContent = SGetField<Org.Apache.Plc4x.JavaNs.Api.Types.PlcResponseCode>(LocalBridgeClazz, "INVALID_ADDRESS"); _INVALID_ADDRESSReady = true; } return _INVALID_ADDRESSContent; } }
        private static Org.Apache.Plc4x.JavaNs.Api.Types.PlcResponseCode _INVALID_ADDRESSContent = default;
        private static bool _INVALID_ADDRESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.13.0/org/apache/plc4x/java/api/types/PlcResponseCode.html#INVALID_DATA"/>
        /// </summary>
        public static Org.Apache.Plc4x.JavaNs.Api.Types.PlcResponseCode INVALID_DATA { get { if (!_INVALID_DATAReady) { _INVALID_DATAContent = SGetField<Org.Apache.Plc4x.JavaNs.Api.Types.PlcResponseCode>(LocalBridgeClazz, "INVALID_DATA"); _INVALID_DATAReady = true; } return _INVALID_DATAContent; } }
        private static Org.Apache.Plc4x.JavaNs.Api.Types.PlcResponseCode _INVALID_DATAContent = default;
        private static bool _INVALID_DATAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.13.0/org/apache/plc4x/java/api/types/PlcResponseCode.html#INVALID_DATATYPE"/>
        /// </summary>
        public static Org.Apache.Plc4x.JavaNs.Api.Types.PlcResponseCode INVALID_DATATYPE { get { if (!_INVALID_DATATYPEReady) { _INVALID_DATATYPEContent = SGetField<Org.Apache.Plc4x.JavaNs.Api.Types.PlcResponseCode>(LocalBridgeClazz, "INVALID_DATATYPE"); _INVALID_DATATYPEReady = true; } return _INVALID_DATATYPEContent; } }
        private static Org.Apache.Plc4x.JavaNs.Api.Types.PlcResponseCode _INVALID_DATATYPEContent = default;
        private static bool _INVALID_DATATYPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.13.0/org/apache/plc4x/java/api/types/PlcResponseCode.html#NOT_FOUND"/>
        /// </summary>
        public static Org.Apache.Plc4x.JavaNs.Api.Types.PlcResponseCode NOT_FOUND { get { if (!_NOT_FOUNDReady) { _NOT_FOUNDContent = SGetField<Org.Apache.Plc4x.JavaNs.Api.Types.PlcResponseCode>(LocalBridgeClazz, "NOT_FOUND"); _NOT_FOUNDReady = true; } return _NOT_FOUNDContent; } }
        private static Org.Apache.Plc4x.JavaNs.Api.Types.PlcResponseCode _NOT_FOUNDContent = default;
        private static bool _NOT_FOUNDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.13.0/org/apache/plc4x/java/api/types/PlcResponseCode.html#OK"/>
        /// </summary>
        public static Org.Apache.Plc4x.JavaNs.Api.Types.PlcResponseCode OK { get { if (!_OKReady) { _OKContent = SGetField<Org.Apache.Plc4x.JavaNs.Api.Types.PlcResponseCode>(LocalBridgeClazz, "OK"); _OKReady = true; } return _OKContent; } }
        private static Org.Apache.Plc4x.JavaNs.Api.Types.PlcResponseCode _OKContent = default;
        private static bool _OKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.13.0/org/apache/plc4x/java/api/types/PlcResponseCode.html#REMOTE_BUSY"/>
        /// </summary>
        public static Org.Apache.Plc4x.JavaNs.Api.Types.PlcResponseCode REMOTE_BUSY { get { if (!_REMOTE_BUSYReady) { _REMOTE_BUSYContent = SGetField<Org.Apache.Plc4x.JavaNs.Api.Types.PlcResponseCode>(LocalBridgeClazz, "REMOTE_BUSY"); _REMOTE_BUSYReady = true; } return _REMOTE_BUSYContent; } }
        private static Org.Apache.Plc4x.JavaNs.Api.Types.PlcResponseCode _REMOTE_BUSYContent = default;
        private static bool _REMOTE_BUSYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.13.0/org/apache/plc4x/java/api/types/PlcResponseCode.html#REMOTE_ERROR"/>
        /// </summary>
        public static Org.Apache.Plc4x.JavaNs.Api.Types.PlcResponseCode REMOTE_ERROR { get { if (!_REMOTE_ERRORReady) { _REMOTE_ERRORContent = SGetField<Org.Apache.Plc4x.JavaNs.Api.Types.PlcResponseCode>(LocalBridgeClazz, "REMOTE_ERROR"); _REMOTE_ERRORReady = true; } return _REMOTE_ERRORContent; } }
        private static Org.Apache.Plc4x.JavaNs.Api.Types.PlcResponseCode _REMOTE_ERRORContent = default;
        private static bool _REMOTE_ERRORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.13.0/org/apache/plc4x/java/api/types/PlcResponseCode.html#RESPONSE_PENDING"/>
        /// </summary>
        public static Org.Apache.Plc4x.JavaNs.Api.Types.PlcResponseCode RESPONSE_PENDING { get { if (!_RESPONSE_PENDINGReady) { _RESPONSE_PENDINGContent = SGetField<Org.Apache.Plc4x.JavaNs.Api.Types.PlcResponseCode>(LocalBridgeClazz, "RESPONSE_PENDING"); _RESPONSE_PENDINGReady = true; } return _RESPONSE_PENDINGContent; } }
        private static Org.Apache.Plc4x.JavaNs.Api.Types.PlcResponseCode _RESPONSE_PENDINGContent = default;
        private static bool _RESPONSE_PENDINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.13.0/org/apache/plc4x/java/api/types/PlcResponseCode.html#UNSUPPORTED"/>
        /// </summary>
        public static Org.Apache.Plc4x.JavaNs.Api.Types.PlcResponseCode UNSUPPORTED { get { if (!_UNSUPPORTEDReady) { _UNSUPPORTEDContent = SGetField<Org.Apache.Plc4x.JavaNs.Api.Types.PlcResponseCode>(LocalBridgeClazz, "UNSUPPORTED"); _UNSUPPORTEDReady = true; } return _UNSUPPORTEDContent; } }
        private static Org.Apache.Plc4x.JavaNs.Api.Types.PlcResponseCode _UNSUPPORTEDContent = default;
        private static bool _UNSUPPORTEDReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.13.0/org/apache/plc4x/java/api/types/PlcResponseCode.html#isDefined(short)"/>
        /// </summary>
        /// <param name="arg0"><see cref="short"/></param>
        /// <returns><see cref="Java.Lang.Boolean"/></returns>
        public static Java.Lang.Boolean IsDefined(short arg0)
        {
            return SExecuteWithSignature<Java.Lang.Boolean>(LocalBridgeClazz, "isDefined", "(S)Ljava/lang/Boolean;", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.13.0/org/apache/plc4x/java/api/types/PlcResponseCode.html#enumForValue(short)"/>
        /// </summary>
        /// <param name="arg0"><see cref="short"/></param>
        /// <returns><see cref="Org.Apache.Plc4x.JavaNs.Api.Types.PlcResponseCode"/></returns>
        public static Org.Apache.Plc4x.JavaNs.Api.Types.PlcResponseCode EnumForValue(short arg0)
        {
            return SExecuteWithSignature<Org.Apache.Plc4x.JavaNs.Api.Types.PlcResponseCode>(LocalBridgeClazz, "enumForValue", "(S)Lorg/apache/plc4x/java/api/types/PlcResponseCode;", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.13.0/org/apache/plc4x/java/api/types/PlcResponseCode.html#valueOf(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Org.Apache.Plc4x.JavaNs.Api.Types.PlcResponseCode"/></returns>
        public static Org.Apache.Plc4x.JavaNs.Api.Types.PlcResponseCode ValueOf(Java.Lang.String arg0)
        {
            return SExecuteWithSignature<Org.Apache.Plc4x.JavaNs.Api.Types.PlcResponseCode>(LocalBridgeClazz, "valueOf", "(Ljava/lang/String;)Lorg/apache/plc4x/java/api/types/PlcResponseCode;", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.13.0/org/apache/plc4x/java/api/types/PlcResponseCode.html#values()"/>
        /// </summary>
        /// <returns><see cref="Org.Apache.Plc4x.JavaNs.Api.Types.PlcResponseCode"/></returns>
        public static Org.Apache.Plc4x.JavaNs.Api.Types.PlcResponseCode[] Values()
        {
            return SExecuteWithSignatureArray<Org.Apache.Plc4x.JavaNs.Api.Types.PlcResponseCode>(LocalBridgeClazz, "values", "()[Lorg/apache/plc4x/java/api/types/PlcResponseCode;");
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.13.0/org/apache/plc4x/java/api/types/PlcResponseCode.html#getValue()"/> 
        /// </summary>
        public short Value
        {
            get { return IExecuteWithSignature<short>("getValue", "()S"); }
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}