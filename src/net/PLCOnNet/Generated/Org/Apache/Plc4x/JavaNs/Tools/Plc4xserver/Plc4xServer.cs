/*
*  Copyright 2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.13.0)
*  using plc4j-plc4x-server-0.12.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Plc4x.JavaNs.Tools.Plc4xserver
{
    #region Plc4xServer declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-plc4x-server/0.12.0/org/apache/plc4x/java/tools/plc4xserver/Plc4xServer.html"/>
    /// </summary>
    public partial class Plc4xServer : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Plc4xServer>, MASES.JCOBridge.C2JBridge.IJVMBridgeMain
    {
        const string _bridgeClassName = "org.apache.plc4x.java.tools.plc4xserver.Plc4xServer";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public Plc4xServer() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public Plc4xServer(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region Plc4xServer implementation
    public partial class Plc4xServer
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-plc4x-server/0.12.0/org/apache/plc4x/java/tools/plc4xserver/Plc4xServer.html#SERVER_PORT_ENVIRONMENT_VARIABLE"/>
        /// </summary>
        public static Java.Lang.String SERVER_PORT_ENVIRONMENT_VARIABLE { get { if (!_SERVER_PORT_ENVIRONMENT_VARIABLEReady) { _SERVER_PORT_ENVIRONMENT_VARIABLEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SERVER_PORT_ENVIRONMENT_VARIABLE"); _SERVER_PORT_ENVIRONMENT_VARIABLEReady = true; } return _SERVER_PORT_ENVIRONMENT_VARIABLEContent; } }
        private static Java.Lang.String _SERVER_PORT_ENVIRONMENT_VARIABLEContent = default;
        private static bool _SERVER_PORT_ENVIRONMENT_VARIABLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-plc4x-server/0.12.0/org/apache/plc4x/java/tools/plc4xserver/Plc4xServer.html#SERVER_PORT_PROPERTY"/>
        /// </summary>
        public static Java.Lang.String SERVER_PORT_PROPERTY { get { if (!_SERVER_PORT_PROPERTYReady) { _SERVER_PORT_PROPERTYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SERVER_PORT_PROPERTY"); _SERVER_PORT_PROPERTYReady = true; } return _SERVER_PORT_PROPERTYContent; } }
        private static Java.Lang.String _SERVER_PORT_PROPERTYContent = default;
        private static bool _SERVER_PORT_PROPERTYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-plc4x-server/0.12.0/org/apache/plc4x/java/tools/plc4xserver/Plc4xServer.html#DEFAULT_PORT"/>
        /// </summary>
        public static int DEFAULT_PORT { get { return SGetField<int>(LocalBridgeClazz, "DEFAULT_PORT"); } set { SSetField(LocalBridgeClazz, "DEFAULT_PORT", value); } }

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-plc4x-server/0.12.0/org/apache/plc4x/java/tools/plc4xserver/Plc4xServer.html#main(java.lang.String[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <exception cref="Java.Lang.Exception"/>
        public static void Main(Java.Lang.String[] arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "main", "([Ljava/lang/String;)V", new object[] { arg0 });
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-plc4x-server/0.12.0/org/apache/plc4x/java/tools/plc4xserver/Plc4xServer.html#getPort()"/> 
        /// </summary>
        public Java.Lang.Integer Port
        {
            get { return IExecuteWithSignature<Java.Lang.Integer>("getPort", "()Ljava/lang/Integer;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-plc4x-server/0.12.0/org/apache/plc4x/java/tools/plc4xserver/Plc4xServer.html#start()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.Concurrent.Future"/></returns>
        public Java.Util.Concurrent.Future<Java.Lang.Void> Start()
        {
            return IExecuteWithSignature<Java.Util.Concurrent.Future<Java.Lang.Void>>("start", "()Ljava/util/concurrent/Future;");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-plc4x-server/0.12.0/org/apache/plc4x/java/tools/plc4xserver/Plc4xServer.html#start(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Java.Util.Concurrent.Future"/></returns>
        public Java.Util.Concurrent.Future<Java.Lang.Void> Start(int arg0)
        {
            return IExecuteWithSignature<Java.Util.Concurrent.Future<Java.Lang.Void>>("start", "(I)Ljava/util/concurrent/Future;", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-plc4x-server/0.12.0/org/apache/plc4x/java/tools/plc4xserver/Plc4xServer.html#stop()"/>
        /// </summary>
        public void Stop()
        {
            IExecuteWithSignature("stop", "()V");
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}