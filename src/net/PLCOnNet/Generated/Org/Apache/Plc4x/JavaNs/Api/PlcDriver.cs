/*
*  Copyright 2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.12.0)
*  using plc4j-api-0.12.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Plc4x.JavaNs.Api
{
    #region PlcDriver declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/PlcDriver.html"/>
    /// </summary>
    public partial class PlcDriver : MASES.JCOBridge.C2JBridge.JVMBridgeBase<PlcDriver>
    {
        const string _bridgeClassName = "org.apache.plc4x.java.api.PlcDriver";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        [global::System.Obsolete("PlcDriver class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public PlcDriver() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        [global::System.Obsolete("PlcDriver class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public PlcDriver(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => true;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => true;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region IPlcDriver
    /// <summary>
    /// .NET interface for TO BE DEFINED FROM USER
    /// </summary>
    public partial interface IPlcDriver
    {
        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion

    #region PlcDriver implementation
    public partial class PlcDriver : Org.Apache.Plc4x.JavaNs.Api.IPlcDriver
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/PlcDriver.html#getMetadata()"/> 
        /// </summary>
        public Org.Apache.Plc4x.JavaNs.Api.Metadata.PlcDriverMetadata Metadata
        {
            get { return IExecuteWithSignature<Org.Apache.Plc4x.JavaNs.Api.Metadata.PlcDriverMetadata>("getMetadata", "()Lorg/apache/plc4x/java/api/metadata/PlcDriverMetadata;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/PlcDriver.html#getProtocolCode()"/> 
        /// </summary>
        public Java.Lang.String ProtocolCode
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getProtocolCode", "()Ljava/lang/String;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/PlcDriver.html#getProtocolName()"/> 
        /// </summary>
        public Java.Lang.String ProtocolName
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getProtocolName", "()Ljava/lang/String;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/PlcDriver.html#getConnection(java.lang.String,org.apache.plc4x.java.api.authentication.PlcAuthentication)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Plc4x.JavaNs.Api.Authentication.PlcAuthentication"/></param>
        /// <returns><see cref="Org.Apache.Plc4x.JavaNs.Api.PlcConnection"/></returns>
        /// <exception cref="Org.Apache.Plc4x.JavaNs.Api.Exceptions.PlcConnectionException"/>
        public Org.Apache.Plc4x.JavaNs.Api.PlcConnection GetConnection(Java.Lang.String arg0, Org.Apache.Plc4x.JavaNs.Api.Authentication.PlcAuthentication arg1)
        {
            return IExecuteWithSignature<Org.Apache.Plc4x.JavaNs.Api.PlcConnection>("getConnection", "(Ljava/lang/String;Lorg/apache/plc4x/java/api/authentication/PlcAuthentication;)Lorg/apache/plc4x/java/api/PlcConnection;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/PlcDriver.html#getConnection(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Org.Apache.Plc4x.JavaNs.Api.PlcConnection"/></returns>
        /// <exception cref="Org.Apache.Plc4x.JavaNs.Api.Exceptions.PlcConnectionException"/>
        public Org.Apache.Plc4x.JavaNs.Api.PlcConnection GetConnection(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Org.Apache.Plc4x.JavaNs.Api.PlcConnection>("getConnection", "(Ljava/lang/String;)Lorg/apache/plc4x/java/api/PlcConnection;", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/PlcDriver.html#discoveryRequestBuilder()"/>
        /// </summary>
        /// <returns><see cref="Org.Apache.Plc4x.JavaNs.Api.Messages.PlcDiscoveryRequest.Builder"/></returns>
        public Org.Apache.Plc4x.JavaNs.Api.Messages.PlcDiscoveryRequest.Builder DiscoveryRequestBuilder()
        {
            return IExecuteWithSignature<Org.Apache.Plc4x.JavaNs.Api.Messages.PlcDiscoveryRequest.Builder>("discoveryRequestBuilder", "()Lorg/apache/plc4x/java/api/messages/PlcDiscoveryRequest$Builder;");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/PlcDriver.html#prepareTag(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Org.Apache.Plc4x.JavaNs.Api.Model.PlcTag"/></returns>
        public Org.Apache.Plc4x.JavaNs.Api.Model.PlcTag PrepareTag(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Org.Apache.Plc4x.JavaNs.Api.Model.PlcTag>("prepareTag", "(Ljava/lang/String;)Lorg/apache/plc4x/java/api/model/PlcTag;", arg0);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}