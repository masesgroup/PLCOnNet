/*
*  Copyright (c) 2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.2.0)
*  using plc4j-api-0.13.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Plc4x.JavaNs.Api.Types
{
    #region PlcSubscriptionType declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.13.0/org/apache/plc4x/java/api/types/PlcSubscriptionType.html"/>
    /// </summary>
    public partial class PlcSubscriptionType : Java.Lang.Enum<Org.Apache.Plc4x.JavaNs.Api.Types.PlcSubscriptionType>
    {
        const string _bridgeClassName = "org.apache.plc4x.java.api.types.PlcSubscriptionType";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public PlcSubscriptionType() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public PlcSubscriptionType(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => false;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => false;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region PlcSubscriptionType implementation
    public partial class PlcSubscriptionType
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.13.0/org/apache/plc4x/java/api/types/PlcSubscriptionType.html#CHANGE_OF_STATE"/>
        /// </summary>
        public static Org.Apache.Plc4x.JavaNs.Api.Types.PlcSubscriptionType CHANGE_OF_STATE { get { if (!_CHANGE_OF_STATEReady) { _CHANGE_OF_STATEContent = SGetField<Org.Apache.Plc4x.JavaNs.Api.Types.PlcSubscriptionType>(LocalBridgeClazz, "CHANGE_OF_STATE"); _CHANGE_OF_STATEReady = true; } return _CHANGE_OF_STATEContent; } }
        private static Org.Apache.Plc4x.JavaNs.Api.Types.PlcSubscriptionType _CHANGE_OF_STATEContent = default;
        private static bool _CHANGE_OF_STATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.13.0/org/apache/plc4x/java/api/types/PlcSubscriptionType.html#CYCLIC"/>
        /// </summary>
        public static Org.Apache.Plc4x.JavaNs.Api.Types.PlcSubscriptionType CYCLIC { get { if (!_CYCLICReady) { _CYCLICContent = SGetField<Org.Apache.Plc4x.JavaNs.Api.Types.PlcSubscriptionType>(LocalBridgeClazz, "CYCLIC"); _CYCLICReady = true; } return _CYCLICContent; } }
        private static Org.Apache.Plc4x.JavaNs.Api.Types.PlcSubscriptionType _CYCLICContent = default;
        private static bool _CYCLICReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.13.0/org/apache/plc4x/java/api/types/PlcSubscriptionType.html#EVENT"/>
        /// </summary>
        public static Org.Apache.Plc4x.JavaNs.Api.Types.PlcSubscriptionType EVENT { get { if (!_EVENTReady) { _EVENTContent = SGetField<Org.Apache.Plc4x.JavaNs.Api.Types.PlcSubscriptionType>(LocalBridgeClazz, "EVENT"); _EVENTReady = true; } return _EVENTContent; } }
        private static Org.Apache.Plc4x.JavaNs.Api.Types.PlcSubscriptionType _EVENTContent = default;
        private static bool _EVENTReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.13.0/org/apache/plc4x/java/api/types/PlcSubscriptionType.html#isDefined(short)"/>
        /// </summary>
        /// <param name="arg0"><see cref="short"/></param>
        /// <returns><see cref="Java.Lang.Boolean"/></returns>
        public static Java.Lang.Boolean IsDefined(short arg0)
        {
            return SExecuteWithSignature<Java.Lang.Boolean>(LocalBridgeClazz, "isDefined", "(S)Ljava/lang/Boolean;", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.13.0/org/apache/plc4x/java/api/types/PlcSubscriptionType.html#enumForValue(short)"/>
        /// </summary>
        /// <param name="arg0"><see cref="short"/></param>
        /// <returns><see cref="Org.Apache.Plc4x.JavaNs.Api.Types.PlcSubscriptionType"/></returns>
        public static Org.Apache.Plc4x.JavaNs.Api.Types.PlcSubscriptionType EnumForValue(short arg0)
        {
            return SExecuteWithSignature<Org.Apache.Plc4x.JavaNs.Api.Types.PlcSubscriptionType>(LocalBridgeClazz, "enumForValue", "(S)Lorg/apache/plc4x/java/api/types/PlcSubscriptionType;", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.13.0/org/apache/plc4x/java/api/types/PlcSubscriptionType.html#valueOf(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Org.Apache.Plc4x.JavaNs.Api.Types.PlcSubscriptionType"/></returns>
        public static Org.Apache.Plc4x.JavaNs.Api.Types.PlcSubscriptionType ValueOf(Java.Lang.String arg0)
        {
            return SExecuteWithSignature<Org.Apache.Plc4x.JavaNs.Api.Types.PlcSubscriptionType>(LocalBridgeClazz, "valueOf", "(Ljava/lang/String;)Lorg/apache/plc4x/java/api/types/PlcSubscriptionType;", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.13.0/org/apache/plc4x/java/api/types/PlcSubscriptionType.html#values()"/>
        /// </summary>
        /// <returns><see cref="Org.Apache.Plc4x.JavaNs.Api.Types.PlcSubscriptionType"/></returns>
        public static Org.Apache.Plc4x.JavaNs.Api.Types.PlcSubscriptionType[] Values()
        {
            return SExecuteWithSignatureArray<Org.Apache.Plc4x.JavaNs.Api.Types.PlcSubscriptionType>(LocalBridgeClazz, "values", "()[Lorg/apache/plc4x/java/api/types/PlcSubscriptionType;");
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.13.0/org/apache/plc4x/java/api/types/PlcSubscriptionType.html#getValue()"/> 
        /// </summary>
        public short Value
        {
            get { return IExecuteWithSignature<short>("getValue", "()S"); }
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}