/*
*  Copyright 2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.12.0)
*  using plc4j-api-0.12.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Plc4x.JavaNs.Api.Types
{
    #region PlcValueType declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/types/PlcValueType.html"/>
    /// </summary>
    public partial class PlcValueType : Java.Lang.Enum<Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType>
    {
        const string _bridgeClassName = "org.apache.plc4x.java.api.types.PlcValueType";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public PlcValueType() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public PlcValueType(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region PlcValueType implementation
    public partial class PlcValueType
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/types/PlcValueType.html#BOOL"/>
        /// </summary>
        public static Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType BOOL { get { if (!_BOOLReady) { _BOOLContent = SGetField<Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType>(LocalBridgeClazz, "BOOL"); _BOOLReady = true; } return _BOOLContent; } }
        private static Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType _BOOLContent = default;
        private static bool _BOOLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/types/PlcValueType.html#BYTE"/>
        /// </summary>
        public static Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType BYTE { get { if (!_BYTEReady) { _BYTEContent = SGetField<Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType>(LocalBridgeClazz, "BYTE"); _BYTEReady = true; } return _BYTEContent; } }
        private static Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType _BYTEContent = default;
        private static bool _BYTEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/types/PlcValueType.html#CHAR"/>
        /// </summary>
        public static Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType CHAR { get { if (!_CHARReady) { _CHARContent = SGetField<Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType>(LocalBridgeClazz, "CHAR"); _CHARReady = true; } return _CHARContent; } }
        private static Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType _CHARContent = default;
        private static bool _CHARReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/types/PlcValueType.html#DATE"/>
        /// </summary>
        public static Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType DATE { get { if (!_DATEReady) { _DATEContent = SGetField<Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType>(LocalBridgeClazz, "DATE"); _DATEReady = true; } return _DATEContent; } }
        private static Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType _DATEContent = default;
        private static bool _DATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/types/PlcValueType.html#DATE_AND_LTIME"/>
        /// </summary>
        public static Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType DATE_AND_LTIME { get { if (!_DATE_AND_LTIMEReady) { _DATE_AND_LTIMEContent = SGetField<Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType>(LocalBridgeClazz, "DATE_AND_LTIME"); _DATE_AND_LTIMEReady = true; } return _DATE_AND_LTIMEContent; } }
        private static Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType _DATE_AND_LTIMEContent = default;
        private static bool _DATE_AND_LTIMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/types/PlcValueType.html#DATE_AND_TIME"/>
        /// </summary>
        public static Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType DATE_AND_TIME { get { if (!_DATE_AND_TIMEReady) { _DATE_AND_TIMEContent = SGetField<Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType>(LocalBridgeClazz, "DATE_AND_TIME"); _DATE_AND_TIMEReady = true; } return _DATE_AND_TIMEContent; } }
        private static Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType _DATE_AND_TIMEContent = default;
        private static bool _DATE_AND_TIMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/types/PlcValueType.html#DINT"/>
        /// </summary>
        public static Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType DINT { get { if (!_DINTReady) { _DINTContent = SGetField<Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType>(LocalBridgeClazz, "DINT"); _DINTReady = true; } return _DINTContent; } }
        private static Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType _DINTContent = default;
        private static bool _DINTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/types/PlcValueType.html#DWORD"/>
        /// </summary>
        public static Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType DWORD { get { if (!_DWORDReady) { _DWORDContent = SGetField<Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType>(LocalBridgeClazz, "DWORD"); _DWORDReady = true; } return _DWORDContent; } }
        private static Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType _DWORDContent = default;
        private static bool _DWORDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/types/PlcValueType.html#INT"/>
        /// </summary>
        public static Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType INT { get { if (!_INTReady) { _INTContent = SGetField<Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType>(LocalBridgeClazz, "INT"); _INTReady = true; } return _INTContent; } }
        private static Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType _INTContent = default;
        private static bool _INTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/types/PlcValueType.html#LDATE"/>
        /// </summary>
        public static Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType LDATE { get { if (!_LDATEReady) { _LDATEContent = SGetField<Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType>(LocalBridgeClazz, "LDATE"); _LDATEReady = true; } return _LDATEContent; } }
        private static Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType _LDATEContent = default;
        private static bool _LDATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/types/PlcValueType.html#LDATE_AND_TIME"/>
        /// </summary>
        public static Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType LDATE_AND_TIME { get { if (!_LDATE_AND_TIMEReady) { _LDATE_AND_TIMEContent = SGetField<Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType>(LocalBridgeClazz, "LDATE_AND_TIME"); _LDATE_AND_TIMEReady = true; } return _LDATE_AND_TIMEContent; } }
        private static Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType _LDATE_AND_TIMEContent = default;
        private static bool _LDATE_AND_TIMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/types/PlcValueType.html#LINT"/>
        /// </summary>
        public static Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType LINT { get { if (!_LINTReady) { _LINTContent = SGetField<Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType>(LocalBridgeClazz, "LINT"); _LINTReady = true; } return _LINTContent; } }
        private static Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType _LINTContent = default;
        private static bool _LINTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/types/PlcValueType.html#List"/>
        /// </summary>
        public static Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType List { get { if (!_ListReady) { _ListContent = SGetField<Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType>(LocalBridgeClazz, "List"); _ListReady = true; } return _ListContent; } }
        private static Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType _ListContent = default;
        private static bool _ListReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/types/PlcValueType.html#LREAL"/>
        /// </summary>
        public static Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType LREAL { get { if (!_LREALReady) { _LREALContent = SGetField<Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType>(LocalBridgeClazz, "LREAL"); _LREALReady = true; } return _LREALContent; } }
        private static Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType _LREALContent = default;
        private static bool _LREALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/types/PlcValueType.html#LTIME"/>
        /// </summary>
        public static Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType LTIME { get { if (!_LTIMEReady) { _LTIMEContent = SGetField<Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType>(LocalBridgeClazz, "LTIME"); _LTIMEReady = true; } return _LTIMEContent; } }
        private static Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType _LTIMEContent = default;
        private static bool _LTIMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/types/PlcValueType.html#LTIME_OF_DAY"/>
        /// </summary>
        public static Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType LTIME_OF_DAY { get { if (!_LTIME_OF_DAYReady) { _LTIME_OF_DAYContent = SGetField<Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType>(LocalBridgeClazz, "LTIME_OF_DAY"); _LTIME_OF_DAYReady = true; } return _LTIME_OF_DAYContent; } }
        private static Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType _LTIME_OF_DAYContent = default;
        private static bool _LTIME_OF_DAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/types/PlcValueType.html#LWORD"/>
        /// </summary>
        public static Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType LWORD { get { if (!_LWORDReady) { _LWORDContent = SGetField<Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType>(LocalBridgeClazz, "LWORD"); _LWORDReady = true; } return _LWORDContent; } }
        private static Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType _LWORDContent = default;
        private static bool _LWORDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/types/PlcValueType.html#NULL"/>
        /// </summary>
        public static Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType NULL { get { if (!_NULLReady) { _NULLContent = SGetField<Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType>(LocalBridgeClazz, "NULL"); _NULLReady = true; } return _NULLContent; } }
        private static Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType _NULLContent = default;
        private static bool _NULLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/types/PlcValueType.html#RAW_BYTE_ARRAY"/>
        /// </summary>
        public static Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType RAW_BYTE_ARRAY { get { if (!_RAW_BYTE_ARRAYReady) { _RAW_BYTE_ARRAYContent = SGetField<Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType>(LocalBridgeClazz, "RAW_BYTE_ARRAY"); _RAW_BYTE_ARRAYReady = true; } return _RAW_BYTE_ARRAYContent; } }
        private static Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType _RAW_BYTE_ARRAYContent = default;
        private static bool _RAW_BYTE_ARRAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/types/PlcValueType.html#REAL"/>
        /// </summary>
        public static Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType REAL { get { if (!_REALReady) { _REALContent = SGetField<Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType>(LocalBridgeClazz, "REAL"); _REALReady = true; } return _REALContent; } }
        private static Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType _REALContent = default;
        private static bool _REALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/types/PlcValueType.html#SINT"/>
        /// </summary>
        public static Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType SINT { get { if (!_SINTReady) { _SINTContent = SGetField<Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType>(LocalBridgeClazz, "SINT"); _SINTReady = true; } return _SINTContent; } }
        private static Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType _SINTContent = default;
        private static bool _SINTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/types/PlcValueType.html#STRING"/>
        /// </summary>
        public static Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType STRING { get { if (!_STRINGReady) { _STRINGContent = SGetField<Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType>(LocalBridgeClazz, "STRING"); _STRINGReady = true; } return _STRINGContent; } }
        private static Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType _STRINGContent = default;
        private static bool _STRINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/types/PlcValueType.html#Struct"/>
        /// </summary>
        public static Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType Struct { get { if (!_StructReady) { _StructContent = SGetField<Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType>(LocalBridgeClazz, "Struct"); _StructReady = true; } return _StructContent; } }
        private static Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType _StructContent = default;
        private static bool _StructReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/types/PlcValueType.html#TIME"/>
        /// </summary>
        public static Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType TIME { get { if (!_TIMEReady) { _TIMEContent = SGetField<Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType>(LocalBridgeClazz, "TIME"); _TIMEReady = true; } return _TIMEContent; } }
        private static Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType _TIMEContent = default;
        private static bool _TIMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/types/PlcValueType.html#TIME_OF_DAY"/>
        /// </summary>
        public static Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType TIME_OF_DAY { get { if (!_TIME_OF_DAYReady) { _TIME_OF_DAYContent = SGetField<Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType>(LocalBridgeClazz, "TIME_OF_DAY"); _TIME_OF_DAYReady = true; } return _TIME_OF_DAYContent; } }
        private static Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType _TIME_OF_DAYContent = default;
        private static bool _TIME_OF_DAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/types/PlcValueType.html#UDINT"/>
        /// </summary>
        public static Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType UDINT { get { if (!_UDINTReady) { _UDINTContent = SGetField<Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType>(LocalBridgeClazz, "UDINT"); _UDINTReady = true; } return _UDINTContent; } }
        private static Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType _UDINTContent = default;
        private static bool _UDINTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/types/PlcValueType.html#UINT"/>
        /// </summary>
        public static Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType UINT { get { if (!_UINTReady) { _UINTContent = SGetField<Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType>(LocalBridgeClazz, "UINT"); _UINTReady = true; } return _UINTContent; } }
        private static Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType _UINTContent = default;
        private static bool _UINTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/types/PlcValueType.html#ULINT"/>
        /// </summary>
        public static Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType ULINT { get { if (!_ULINTReady) { _ULINTContent = SGetField<Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType>(LocalBridgeClazz, "ULINT"); _ULINTReady = true; } return _ULINTContent; } }
        private static Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType _ULINTContent = default;
        private static bool _ULINTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/types/PlcValueType.html#USINT"/>
        /// </summary>
        public static Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType USINT { get { if (!_USINTReady) { _USINTContent = SGetField<Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType>(LocalBridgeClazz, "USINT"); _USINTReady = true; } return _USINTContent; } }
        private static Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType _USINTContent = default;
        private static bool _USINTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/types/PlcValueType.html#WCHAR"/>
        /// </summary>
        public static Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType WCHAR { get { if (!_WCHARReady) { _WCHARContent = SGetField<Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType>(LocalBridgeClazz, "WCHAR"); _WCHARReady = true; } return _WCHARContent; } }
        private static Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType _WCHARContent = default;
        private static bool _WCHARReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/types/PlcValueType.html#WORD"/>
        /// </summary>
        public static Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType WORD { get { if (!_WORDReady) { _WORDContent = SGetField<Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType>(LocalBridgeClazz, "WORD"); _WORDReady = true; } return _WORDContent; } }
        private static Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType _WORDContent = default;
        private static bool _WORDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/types/PlcValueType.html#WSTRING"/>
        /// </summary>
        public static Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType WSTRING { get { if (!_WSTRINGReady) { _WSTRINGContent = SGetField<Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType>(LocalBridgeClazz, "WSTRING"); _WSTRINGReady = true; } return _WSTRINGContent; } }
        private static Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType _WSTRINGContent = default;
        private static bool _WSTRINGReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/types/PlcValueType.html#isDefined-short-"/>
        /// </summary>
        /// <param name="arg0"><see cref="short"/></param>
        /// <returns><see cref="Java.Lang.Boolean"/></returns>
        public static Java.Lang.Boolean IsDefined(short arg0)
        {
            return SExecuteWithSignature<Java.Lang.Boolean>(LocalBridgeClazz, "isDefined", "(S)Ljava/lang/Boolean;", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/types/PlcValueType.html#enumForValue-short-"/>
        /// </summary>
        /// <param name="arg0"><see cref="short"/></param>
        /// <returns><see cref="Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType"/></returns>
        public static Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType EnumForValue(short arg0)
        {
            return SExecuteWithSignature<Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType>(LocalBridgeClazz, "enumForValue", "(S)Lorg/apache/plc4x/java/api/types/PlcValueType;", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/types/PlcValueType.html#valueOf-java.lang.String-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType"/></returns>
        public static Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType ValueOf(Java.Lang.String arg0)
        {
            return SExecuteWithSignature<Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType>(LocalBridgeClazz, "valueOf", "(Ljava/lang/String;)Lorg/apache/plc4x/java/api/types/PlcValueType;", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/types/PlcValueType.html#values--"/>
        /// </summary>
        /// <returns><see cref="Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType"/></returns>
        public static Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType[] Values()
        {
            return SExecuteWithSignatureArray<Org.Apache.Plc4x.JavaNs.Api.Types.PlcValueType>(LocalBridgeClazz, "values", "()[Lorg/apache/plc4x/java/api/types/PlcValueType;");
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/types/PlcValueType.html#getDefaultJavaType--"/> 
        /// </summary>
        public Java.Lang.Class DefaultJavaType
        {
            get { return IExecuteWithSignature<Java.Lang.Class>("getDefaultJavaType", "()Ljava/lang/Class;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.plc4x/plc4j-api/0.12.0/org/apache/plc4x/java/api/types/PlcValueType.html#getValue--"/> 
        /// </summary>
        public short Value
        {
            get { return IExecuteWithSignature<short>("getValue", "()S"); }
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}